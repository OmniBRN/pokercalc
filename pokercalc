#!/usr/bin/env python3
import random
import math

def maximum(int1, int2):
    if int1 > int2: return int1
    return int2

def pokerCombination(pokerHand):
    pokerHand.sort()
    pokerHand_Copy = [x for x in pokerHand]
    
    pokerHand_Copy = sorted(pokerHand_Copy, key = lambda x: x.int())[::-1]
    # for x in pokerHand:
    #     print(x, end=" ")
    # print()
    
    colors = {}
    numbers = {}
    for color in ['Spades', 'Hearts', 'Clubs', 'Diamonds']:
        colors[color] = (0, []);
    for number in [str(x) for x in range(2,11) ] + ['J', 'Q', 'K', 'A']:
        numbers[number] = (0, []);
    for card in pokerHand:
        t = colors[card.color][1]
        t.append(card)
        colors[card.color] = (colors[card.color][0] + 1, t) 

    # Straight Flush - returns every card correctly
    flush = -1
    for color in colors:
        if colors[color][0] >= 5:
            consecutive = 1
            biggestConsecutive = -1
            biggestStart = -1
            start = 0           
            for i in range(0, len(colors[color][1])-1):
                if colors[color][1][i].int() == colors[color][1][i+1].int() - 1:
                    consecutive += 1
                else:
                    biggestConsecutive = maximum(consecutive, biggestConsecutive)
                    biggestStart = maximum(start, biggestStart)
                    consecutive = 1
                    start = i+1
                if consecutive > 5:
                    start += 1
                
            biggestConsecutive = maximum(consecutive, biggestConsecutive)
            biggestStart = maximum(start, biggestStart)
            if biggestConsecutive >= 5: 
                temp2 = colors[color][1]
                temp2 = temp2[start:start+5]
                temp3 = [x for x in reversed(temp2)]
                # print('Straight Flush', end=  " ")
                # for x in temp3:
                #     print(x, end= " ")
                # print()
                if temp3[0].number == 'A':
                    return('Royal Flush', temp3)

                return ('Straight Flush', temp3)
                
            else: flush = color
    
    for card in pokerHand:
        t = numbers[card.number][1]
        t.append(card)
        numbers[card.number] = (numbers[card.number][0] + 1, t)
    keys = [x for x in numbers.keys()]
    keys = [x for x in reversed(keys)]

    # Four of a Kind - returns the cards correctly
    for number in keys:
        if numbers[number][0] == 4:
            # print('Four of a Kind', end = " ")
            # for x in numbers[number][1]:
            #     print(x, end=" ")
            # print()
            return ('Four of a Kind', numbers[number][1])

    tok = -1     
    pair = [-1, -1] 
    count = 0
    for number in keys:
        if numbers[number][0] == 3:
            if tok == -1:
                tok = numbers[number][1]
            else:
                pair[count] = numbers[number][1][:2]
                count += 1

           
    for number in keys:
        if numbers[number][0] == 2:
            pair[count] = numbers[number][1]
            count+=1
            if count == 2:
                break

    # Full House - returns the cards correctly
    if tok != -1 and pair[0] != -1:
            # print('Full house', end = " ")
            # for x in tok + pair[0]:
            #     print(x, end= " ")
            # print()
            return ("Full house", (tok, pair[0]))

    # Flush - returns the cards correctly
    if flush != -1:
        # print('Flush', end=" ")

        temp1 = -1
        if len(colors[flush][1])>5:
            temp1 = colors[flush][1]
            temp1 = temp1[len(temp1)-5:]
        else: temp1 = colors[flush][1]
        # for x in temp1:
        #     print(x, end= " ")
        # temp1 = colors[flush][1]
        # print()
        return ("Flush", temp1)
    
    t = [numbers[number][0] for number in keys]
    consecutive = 0
    start = 0
    # Straight - returns cards correctly
    for i in range(0, len(t)):
        if t[i] > 0 :
            consecutive += 1
        else:
            consecutive = 0
            start = i+1
        if consecutive == 5:
            temp = [numbers[x] for x in keys]
            temp = temp[start:start+5]
            temp = [x[1][0] for x in temp]

            # print('Straight', end= " ")
            # for x in temp:
            #     print(x, end= " ")
            # print()
            return('Straight', temp) 
    
    if tok!= -1:
        # print('Three of a Kind', end = " ")
        # for x in tok:
        #     print(x, end=" ")
        # print()
        kicker = []
        for x in pokerHand_Copy:
            if len(kicker) > 1:
                break
            if x not in tok:
                kicker.append(x)
        return('Three of a kind', (tok, kicker))

    if pair[1] != -1:
        # print('Two Pair', end = " ")
        # for x in pair[0] + pair[1]:
        #     print(x, end = " ")
        # print()
        kicker = -1
        for x in pokerHand_Copy:
            # print(x, end = " ")
            if x not in pair[0] + pair[1]:
                kicker = x
                break
    
        return('Two Pair', (pair[0], pair[1], kicker))
    
    if pair[0] != -1:
        # print('Pair', end = " ")
        # for x in pair[0]:
        #     print(x, end= " ")
        # print()
        kicker = []
        for x in pokerHand_Copy:
            if len(kicker) > 2:
                break
            if x not in pair[0]:
                kicker.append(x)
        return('Pair', (pair[0], kicker))
    
    
    hk = pokerHand_Copy[0]
    kicker = pokerHand_Copy[1:5]

    # print('High Card', hk)
    
    return ('High Card', [hk] + kicker)

def generateGames(players, deck, number, knownHands,CardOnTable, gameNO):
    new_players = [x for x in players]
    new_deck = deck.copy()
    new_deck.shuffle()
    new_CardOnTable= [x for x in CardOnTable]
    # print(new_deck)
    contor = 0
    for _ in range(1, number-knownHands+1):
        carti = [new_deck.at(contor), new_deck.at(contor+1)]
        player = Jucator(carti[0], carti[1])
        contor += 2
        new_players.append(player)
        new_deck.remove(carti[0])
        new_deck.remove(carti[1])
    
    new_deck.remove(new_deck.at(0));
    
    if len(new_CardOnTable) == 0:
        # Flop
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));

        new_deck.remove(new_deck.at(0));
        # Turn
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));

        new_deck.remove(new_deck.at(0));
        # River
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));

    elif len(new_CardOnTable) == 3:
        # Turn
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));

        new_deck.remove(new_deck.at(0));
        # River
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));
    elif len(new_CardOnTable) == 4:
        # River
        new_CardOnTable.append(new_deck.at(0));
        new_deck.remove(new_deck.at(0));

    # print(f"GAME #{gameNO} - {new_CardOnTable}") 
    hand = [0 for _ in players[:knownHands+1]]
    for i,x in enumerate(players[:knownHands+1]):
        hand[i] = [i, pokerCombination(x.carti + new_CardOnTable)]
        # print(f"Player {i+1}: {hand[i]}")
    # print(hand)
    for x in hand:
        match x[1][0]:
            case 'Royal Flush': x[1] = (10, x[1][0], x[1][1])
            case 'Straight Flush': x[1] =  (9, x[1][0] ,x[1][1])
            case 'Four of a Kind':x[1] = (8,x[1][0], x[1][1])
            case 'Full house':x[1] = (7,x[1][0], x[1][1])
            case 'Flush':x[1] = (6,x[1][0], x[1][1])
            case 'Straight':x[1] = (5,x[1][0], x[1][1])
            case 'Three of a kind':x[1] = (4,x[1][0], x[1][1])
            case 'Two Pair':x[1]= (3,x[1][0], x[1][1])
            case 'Pair':x[1] = (2,x[1][0], x[1][1])
            case 'High Card':x[1] = (1,x[1][0], x[1][1])
    biggestHandType = -1
    biggestHands = []


    for i in range(10,-1,-1):
        for x in hand:
            if x[1][0] == i:
                biggestHandType = i
                biggestHands.append(x)
        if biggestHandType != -1:
            break
    if len(biggestHands) == 1:
        return [biggestHands[0][0]]
    biggestHands = [([x[0]], x[1]) for x in biggestHands]
    
    dif = 0
    for i in range(0, len(biggestHands)-1-dif):
        for j in range(i+1, len(biggestHands)):
            j = j - dif
            if biggestHands[i][1][2] == biggestHands[j][1][2]:
                biggestHands[i][0].append(biggestHands[j][0][0])
                biggestHands = biggestHands[:j] + biggestHands[j+1:]
                dif += 1
    
    # for x in biggestHands:
    #     print(x, end= " ")
    while(len(biggestHands) > 1):
        hand1 = biggestHands[0] 
        hand2 = biggestHands[1]
        t = []
        if len(biggestHands) > 2:
            t = biggestHands[2:]
        match biggestHandType:
            # Straight Flush nu poti sa ai egalitate decat daca ai straight flush pe masa
            case 9:
                if hand1[1][2][0].int() > hand2[1][2][0].int():
                    biggestHands = [hand1] + t 
                    
                else: 
                    biggestHands = [hand2] + t
                  
            
            # Four of a kind se intampla la mai multi oamenii numai daca e four of a kind pe masa 
            # case 8:
            #     break
            # Full house mai intai se compara numarul tok-ului si dupa numarul pair-ului
            case 7:
                if hand1[1][2][0][0].int() > hand2[1][2][1][0].int():
                    biggestHands = [hand1] + t
                    
                elif hand1[1][2][0][0].int() > hand2[1][2][1][0].int():
                    biggestHands = [hand2] + t
                   
                else:
                    if hand1[1][2][1][0].int() > hand2[1][2][1][0].int():
                        biggestHands = [hand1] + t
                        
                    else:
                        biggestHands = [hand2] + t
                      
            # Flush
            case 6:
                currentCard = 0
                while(currentCard<5):
                    if hand1[1][2][currentCard].int() > hand2[1][2][currentCard].int():
                        biggestHands = [hand1] + t
                        break
                    
                    elif hand1[1][2][currentCard].int() < hand2[1][2][currentCard].int():
                        biggestHands = [hand2] + t
                        break
                      

                    else:
                        currentCard += 1
               
            # Straight
            case 5:
                if hand1[1][2][0].int() > hand2[1][2][0].int():
                    biggestHands = [hand1] + t
                    
                else:
                    biggestHands = [hand2] + t
                    

            # Three of a kind
            case 4:
                if hand1[1][2][0][0].int() > hand2[1][2][0][0].int():
                    biggestHands = [hand1] + t
                    
                elif hand1[1][2][0][0].int() < hand2[1][2][0][0].int():
                    biggestHands = [hand1] + t
                    
                else:
                    currentCard = 0
                    while(currentCard<2):
                        if hand1[1][2][1][currentCard].int() > hand2[1][2][1][currentCard].int():
                            biggestHands = [hand1] + t
                            break
                        
                        elif hand1[1][2][1][currentCard].int() < hand2[1][2][1][currentCard].int():
                            biggestHands = [hand2] + t
                            break
                            

                        else:
                            currentCard += 1
                   
            # Two Pair
            case 3: 
                if hand1[1][2][0][0].int() > hand2[1][2][0][0].int():
                    biggestHands = [hand1] + t
                   

                elif hand1[1][2][0][0].int() < hand2[1][2][0][0].int():
                    biggestHands = [hand2] + t
                   
                else:
                    if hand1[1][2][1][0].int() > hand2[1][2][1][0].int():
                        biggestHands = [hand1] + t
                       

                    elif hand1[1][2][1][0].int() < hand2[1][2][1][0].int():
                        biggestHands = [hand2] + t
                        
                    else:
                        if hand1[1][2][2].int() > hand2[1][2][2].int():
                            biggestHands = [hand1] + t
                           
                        else:
                            biggestHands = [hand2] + t
                            
            # Pair
            case 2:

                if hand1[1][2][0][0].int() > hand2[1][2][0][0].int():
                    biggestHands = [hand1] + t
                    

                elif hand1[1][2][0][0].int() < hand2[1][2][0][0].int():
                    biggestHands = [hand2] + t
                   
                else:

                    currentCard = 0
                    while(currentCard<3):
                        if hand1[1][2][1][currentCard].int() > hand2[1][2][1][currentCard].int():
                            biggestHands = [hand1] + t
                            break
                        
                        elif hand1[1][2][1][currentCard].int() < hand2[1][2][1][currentCard].int():
                            biggestHands = [hand2] + t
                            break 

                        else:
                            currentCard += 1
                    break
            # High Card
            case 1:
                currentCard = 0
                while(currentCard<5):
                    if hand1[1][2][currentCard].int() > hand2[1][2][currentCard].int():
                        biggestHands = [hand1] + t
                        break
                    
                    elif hand1[1][2][currentCard].int() < hand2[1][2][currentCard].int():
                        biggestHands = [hand2] + t
                        break
                        

                    else:
                        currentCard += 1
                
    return biggestHands[0][0]
                
def string_to_card(string):
    try:
        c = ''
        if len(string) > 3 or len(string) < 2:
            raise Exception
        if len(string) == 2:
            if string[0] not in [str(x) for x in range(2,11)] + ['J','Q','K','A']:
                raise Exception
            if string[1] not in [x[0].lower() for x in ['Spades', 'Hearts', 'Clubs', 'Diamonds']]:
                raise Exception
            match string[1]:
                case 'c': c = 'Clubs'
                case 'd': c = 'Diamonds'
                case 'h': c=  'Hearts'
                case 's': c = 'Spades'
            return Card(string[0], c)
        if len(string)==3:
            if string[0:2]!='10':
                raise Exception
            if string[2] not in [x[0].lower() for x in ['Spades', 'Hearts', 'Clubs', 'Diamonds']]:
                raise Exception
            match string[2]:
                case 'c': c = 'Clubs'
                case 'd': c = 'Diamonds'
                case 'h': c=  'Hearts'
                case 's': c = 'Spades'
            return Card('10', c)

            
    except:
        print("string is not compatible with cards")
        exit(1)

class Card:
    def __init__(self, number, color):
        if type(number) is int: number = str(number)
        try:
            if(color) not in ['Spades', 'Hearts', 'Clubs', 'Diamonds']:
                raise Exception
            if(number) not in [str(x) for x in range(2,11)] + ['J','Q','K','A']:
                raise Exception
            self.color = color 
            self.number = number 
        except:
            print('Card is invalid')
            exit(1)
    def int(self):
        if self.number in [str(x) for x in range(2,11)]:
            return int(self.number)
        match self.number:
            case 'J': return 11
            case 'Q': return 12
            case 'K': return 13
            case 'A': return 14
    
    def __repr__(self):
        return str(self)
    def __str__(self):
        return f"{self.number}{(self.color)[0].lower()}"
    def __eq__(self, other):
        return self.number == other.number and self.color==other.color
    def __gt__(self, other):
        color1 = 0
        color2 = 0
        number1 = 0
        number2 = 0
        match self.color:
            case 'Spades': color1 = 1
            case 'Hearts': color1 = 2
            case 'Clubs': color1 = 3
            case 'Diamonds': color1 = 4
        match other.color:
            case 'Spades': color2 = 1
            case 'Hearts': color2 = 2
            case 'Clubs': color2 = 3
            case 'Diamonds': color2 = 4
        if color1 != color2:
            return color1 > color2
        if self.number in [str(x) for x in range(1,11)]:
            number1 = int(self.number)
        else:
            match self.number:
                case 'J': number1 = 11
                case 'Q': number1 = 12
                case 'K': number1 = 13
                case 'A': number1 = 14
        if other.number in [str(x) for x in range(1,11)]:
            number2 = int(other.number)
        else:
            match other.number:
                case 'J': number2 = 11
                case 'Q': number2 = 12
                case 'K': number2 = 13
                case 'A': number2 = 14
        return number1 > number2    
                 
class Deck:
    def __init__(self):
        self.deck = []
        for y in ['Spades', 'Hearts', 'Clubs', 'Diamonds']:
            for x in ([str(z) for z in range(2,11)]+['J', 'Q', 'K', 'A']):
                carte = Card(x,y)
                self.deck.append(carte)
    def __str__(self):
        return "".join([str(x)+" " for x in self.deck])
    def at(self, index):
        try:
            if index<0 or index>51:
                raise Exception("Index out of array")
            return self.deck[index]
        except:
            print("Index out of array")
            exit(1)
    def shuffle(self):
        random.shuffle(self.deck)

    def remove(self, carte):
            removed = -1
            if carte == self.deck[len(self.deck)-1]:
                self.deck = self.deck[:len(self.deck)-1]
                removed = 0
            else:
                for i in range(0, len(self.deck)-1):
                    if carte == self.deck[i]:
                        self.deck = self.deck[:i] + self.deck[(i+1):]
                        removed = 0
            if removed == -1:
                print("Two instances of the same card found")
                exit(1)
            
            

    def copy(self):
        new_deck = Deck()
        new_deck.deck = [x for x in self.deck]
        return new_deck
    
class Jucator:
    def __init__(self, card1, card2):
        if type(card1) is str: card1 = string_to_card(card1)
        if type(card2) is str: card2 = string_to_card(card2)
        self.carti = [card1, card2]
    def __str__(self):
        return str(self.carti[0])+ " " + str(self.carti[1])

print("How many players at the table?")
number = int(input())
if(number<=1):
    print("Too little people at the table")
    exit(1)

if(number>22):
    print('Not enough cards for the number of people')
    exit(1)

deck = Deck()

print("How many players' cards do you want to evaluate?")
knownMembersCards = int(input())
if knownMembersCards < 0 or knownMembersCards > number:
    print("Try again")
    exit(1)
players = []
for x in range(1, knownMembersCards+1):
    carti = input().split()
    knownPlayer = Jucator(carti[0], carti[1])
    players.append(knownPlayer)
    deck.remove(string_to_card(carti[0]))
    deck.remove(string_to_card(carti[1]))

# print(deck.deck)
Winners = [0 for x in range(0, knownMembersCards)]

print("In what states is the game now?")
print("Pre-Flop")
print("Flop")
print("Turn")
print("River")

Cards_On_Table = []
state = input()
match state:
    case 'Flop':
        print("Enter the flopped cards (3):")
        cards = input().split() 
        cards = [string_to_card(x) for x in cards]
        for x in cards:
            deck.remove(x)
        Cards_On_Table = cards
    case 'Turn':
        print("Enter the flopped cards and the turned card (4):")
        cards = input().split() 
        cards = [string_to_card(x) for x in cards]
        for x in cards:
            deck.remove(x)
        Cards_On_Table = cards
    case 'River':
        print("Enter the flopped cards, turned card and the river (5):")
        cards = input().split() 
        cards = [string_to_card(x) for x in cards]
        for x in cards:
            deck.remove(x)
        Cards_On_Table = cards


NUMBER_OF_GAMES = 5001
for i in range(1, NUMBER_OF_GAMES):
    winner = generateGames(players,deck,number,knownMembersCards, Cards_On_Table, i)
    pct = 1 / len(winner)
    for x in winner:
        Winners[x] += pct
    
    # print(f"GAME #{i} : Winner - {winner}")

for i,x in enumerate(Winners):
    print(f"Player #{i+1}: {(math.trunc(x*100/ NUMBER_OF_GAMES))/100}")